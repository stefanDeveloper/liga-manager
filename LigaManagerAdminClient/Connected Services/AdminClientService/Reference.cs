//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LigaManagerAdminClient.AdminClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminClientService.IAdminClientService")]
    public interface IAdminClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/IsOpen", ReplyAction="http://tempuri.org/ILigaManagerService/IsOpenResponse")]
        bool IsOpen();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/IsOpen", ReplyAction="http://tempuri.org/ILigaManagerService/IsOpenResponse")]
        System.Threading.Tasks.Task<bool> IsOpenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetMatches", ReplyAction="http://tempuri.org/ILigaManagerService/GetMatchesResponse")]
        LigaManagerServer.Models.Match[] GetMatches(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetMatches", ReplyAction="http://tempuri.org/ILigaManagerService/GetMatchesResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Match[]> GetMatchesAsync(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetBets", ReplyAction="http://tempuri.org/ILigaManagerService/GetBetsResponse")]
        LigaManagerServer.Models.Bet[] GetBets(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetBets", ReplyAction="http://tempuri.org/ILigaManagerService/GetBetsResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Bet[]> GetBetsAsync(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetAllBets", ReplyAction="http://tempuri.org/ILigaManagerService/GetAllBetsResponse")]
        LigaManagerServer.Models.Bet[] GetAllBets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetAllBets", ReplyAction="http://tempuri.org/ILigaManagerService/GetAllBetsResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Bet[]> GetAllBetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetBettors", ReplyAction="http://tempuri.org/ILigaManagerService/GetBettorsResponse")]
        LigaManagerServer.Models.Bettor[] GetBettors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetBettors", ReplyAction="http://tempuri.org/ILigaManagerService/GetBettorsResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Bettor[]> GetBettorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetBettor", ReplyAction="http://tempuri.org/ILigaManagerService/GetBettorResponse")]
        LigaManagerServer.Models.Bettor GetBettor(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetBettor", ReplyAction="http://tempuri.org/ILigaManagerService/GetBettorResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Bettor> GetBettorAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetSeasons", ReplyAction="http://tempuri.org/ILigaManagerService/GetSeasonsResponse")]
        LigaManagerServer.Models.Season[] GetSeasons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetSeasons", ReplyAction="http://tempuri.org/ILigaManagerService/GetSeasonsResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Season[]> GetSeasonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetSeasonToTeamRelation", ReplyAction="http://tempuri.org/ILigaManagerService/GetSeasonToTeamRelationResponse")]
        LigaManagerServer.Models.SeasonToTeamRelation[] GetSeasonToTeamRelation(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetSeasonToTeamRelation", ReplyAction="http://tempuri.org/ILigaManagerService/GetSeasonToTeamRelationResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.SeasonToTeamRelation[]> GetSeasonToTeamRelationAsync(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetAllSeasonToTeamRelation", ReplyAction="http://tempuri.org/ILigaManagerService/GetAllSeasonToTeamRelationResponse")]
        LigaManagerServer.Models.SeasonToTeamRelation[] GetAllSeasonToTeamRelation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetAllSeasonToTeamRelation", ReplyAction="http://tempuri.org/ILigaManagerService/GetAllSeasonToTeamRelationResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.SeasonToTeamRelation[]> GetAllSeasonToTeamRelationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetAllTeams", ReplyAction="http://tempuri.org/ILigaManagerService/GetAllTeamsResponse")]
        LigaManagerServer.Models.Team[] GetAllTeams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILigaManagerService/GetAllTeams", ReplyAction="http://tempuri.org/ILigaManagerService/GetAllTeamsResponse")]
        System.Threading.Tasks.Task<LigaManagerServer.Models.Team[]> GetAllTeamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddBettor", ReplyAction="http://tempuri.org/IAdminClientService/AddBettorResponse")]
        bool AddBettor(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddBettor", ReplyAction="http://tempuri.org/IAdminClientService/AddBettorResponse")]
        System.Threading.Tasks.Task<bool> AddBettorAsync(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateBettor", ReplyAction="http://tempuri.org/IAdminClientService/UpdateBettorResponse")]
        bool UpdateBettor(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateBettor", ReplyAction="http://tempuri.org/IAdminClientService/UpdateBettorResponse")]
        System.Threading.Tasks.Task<bool> UpdateBettorAsync(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteBettor", ReplyAction="http://tempuri.org/IAdminClientService/DeleteBettorResponse")]
        bool DeleteBettor(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteBettor", ReplyAction="http://tempuri.org/IAdminClientService/DeleteBettorResponse")]
        System.Threading.Tasks.Task<bool> DeleteBettorAsync(LigaManagerServer.Models.Bettor bettor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddTeam", ReplyAction="http://tempuri.org/IAdminClientService/AddTeamResponse")]
        bool AddTeam(LigaManagerServer.Models.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddTeam", ReplyAction="http://tempuri.org/IAdminClientService/AddTeamResponse")]
        System.Threading.Tasks.Task<bool> AddTeamAsync(LigaManagerServer.Models.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateTeam", ReplyAction="http://tempuri.org/IAdminClientService/UpdateTeamResponse")]
        bool UpdateTeam(LigaManagerServer.Models.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateTeam", ReplyAction="http://tempuri.org/IAdminClientService/UpdateTeamResponse")]
        System.Threading.Tasks.Task<bool> UpdateTeamAsync(LigaManagerServer.Models.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteTeam", ReplyAction="http://tempuri.org/IAdminClientService/DeleteTeamResponse")]
        bool DeleteTeam(LigaManagerServer.Models.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteTeam", ReplyAction="http://tempuri.org/IAdminClientService/DeleteTeamResponse")]
        System.Threading.Tasks.Task<bool> DeleteTeamAsync(LigaManagerServer.Models.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteSeason", ReplyAction="http://tempuri.org/IAdminClientService/DeleteSeasonResponse")]
        bool DeleteSeason(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteSeason", ReplyAction="http://tempuri.org/IAdminClientService/DeleteSeasonResponse")]
        System.Threading.Tasks.Task<bool> DeleteSeasonAsync(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddSeason", ReplyAction="http://tempuri.org/IAdminClientService/AddSeasonResponse")]
        bool AddSeason(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddSeason", ReplyAction="http://tempuri.org/IAdminClientService/AddSeasonResponse")]
        System.Threading.Tasks.Task<bool> AddSeasonAsync(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateSeason", ReplyAction="http://tempuri.org/IAdminClientService/UpdateSeasonResponse")]
        bool UpdateSeason(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateSeason", ReplyAction="http://tempuri.org/IAdminClientService/UpdateSeasonResponse")]
        System.Threading.Tasks.Task<bool> UpdateSeasonAsync(LigaManagerServer.Models.Season season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteMatch", ReplyAction="http://tempuri.org/IAdminClientService/DeleteMatchResponse")]
        bool DeleteMatch(LigaManagerServer.Models.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteMatch", ReplyAction="http://tempuri.org/IAdminClientService/DeleteMatchResponse")]
        System.Threading.Tasks.Task<bool> DeleteMatchAsync(LigaManagerServer.Models.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddMatch", ReplyAction="http://tempuri.org/IAdminClientService/AddMatchResponse")]
        bool AddMatch(LigaManagerServer.Models.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddMatch", ReplyAction="http://tempuri.org/IAdminClientService/AddMatchResponse")]
        System.Threading.Tasks.Task<bool> AddMatchAsync(LigaManagerServer.Models.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateMatch", ReplyAction="http://tempuri.org/IAdminClientService/UpdateMatchResponse")]
        bool UpdateMatch(LigaManagerServer.Models.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/UpdateMatch", ReplyAction="http://tempuri.org/IAdminClientService/UpdateMatchResponse")]
        System.Threading.Tasks.Task<bool> UpdateMatchAsync(LigaManagerServer.Models.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddSeasonToTeamRelation", ReplyAction="http://tempuri.org/IAdminClientService/AddSeasonToTeamRelationResponse")]
        bool AddSeasonToTeamRelation(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/AddSeasonToTeamRelation", ReplyAction="http://tempuri.org/IAdminClientService/AddSeasonToTeamRelationResponse")]
        System.Threading.Tasks.Task<bool> AddSeasonToTeamRelationAsync(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteSeasonToTeamRelation", ReplyAction="http://tempuri.org/IAdminClientService/DeleteSeasonToTeamRelationResponse")]
        bool DeleteSeasonToTeamRelation(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/DeleteSeasonToTeamRelation", ReplyAction="http://tempuri.org/IAdminClientService/DeleteSeasonToTeamRelationResponse")]
        System.Threading.Tasks.Task<bool> DeleteSeasonToTeamRelationAsync(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/GenerateMatches", ReplyAction="http://tempuri.org/IAdminClientService/GenerateMatchesResponse")]
        void GenerateMatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminClientService/GenerateMatches", ReplyAction="http://tempuri.org/IAdminClientService/GenerateMatchesResponse")]
        System.Threading.Tasks.Task GenerateMatchesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminClientServiceChannel : LigaManagerAdminClient.AdminClientService.IAdminClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminClientServiceClient : System.ServiceModel.ClientBase<LigaManagerAdminClient.AdminClientService.IAdminClientService>, LigaManagerAdminClient.AdminClientService.IAdminClientService {
        
        public AdminClientServiceClient() {
        }
        
        public AdminClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsOpen() {
            return base.Channel.IsOpen();
        }
        
        public System.Threading.Tasks.Task<bool> IsOpenAsync() {
            return base.Channel.IsOpenAsync();
        }
        
        public LigaManagerServer.Models.Match[] GetMatches(LigaManagerServer.Models.Season season) {
            return base.Channel.GetMatches(season);
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Match[]> GetMatchesAsync(LigaManagerServer.Models.Season season) {
            return base.Channel.GetMatchesAsync(season);
        }
        
        public LigaManagerServer.Models.Bet[] GetBets(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.GetBets(bettor);
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Bet[]> GetBetsAsync(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.GetBetsAsync(bettor);
        }
        
        public LigaManagerServer.Models.Bet[] GetAllBets() {
            return base.Channel.GetAllBets();
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Bet[]> GetAllBetsAsync() {
            return base.Channel.GetAllBetsAsync();
        }
        
        public LigaManagerServer.Models.Bettor[] GetBettors() {
            return base.Channel.GetBettors();
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Bettor[]> GetBettorsAsync() {
            return base.Channel.GetBettorsAsync();
        }
        
        public LigaManagerServer.Models.Bettor GetBettor(string nickname) {
            return base.Channel.GetBettor(nickname);
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Bettor> GetBettorAsync(string nickname) {
            return base.Channel.GetBettorAsync(nickname);
        }
        
        public LigaManagerServer.Models.Season[] GetSeasons() {
            return base.Channel.GetSeasons();
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Season[]> GetSeasonsAsync() {
            return base.Channel.GetSeasonsAsync();
        }
        
        public LigaManagerServer.Models.SeasonToTeamRelation[] GetSeasonToTeamRelation(LigaManagerServer.Models.Season season) {
            return base.Channel.GetSeasonToTeamRelation(season);
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.SeasonToTeamRelation[]> GetSeasonToTeamRelationAsync(LigaManagerServer.Models.Season season) {
            return base.Channel.GetSeasonToTeamRelationAsync(season);
        }
        
        public LigaManagerServer.Models.SeasonToTeamRelation[] GetAllSeasonToTeamRelation() {
            return base.Channel.GetAllSeasonToTeamRelation();
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.SeasonToTeamRelation[]> GetAllSeasonToTeamRelationAsync() {
            return base.Channel.GetAllSeasonToTeamRelationAsync();
        }
        
        public LigaManagerServer.Models.Team[] GetAllTeams() {
            return base.Channel.GetAllTeams();
        }
        
        public System.Threading.Tasks.Task<LigaManagerServer.Models.Team[]> GetAllTeamsAsync() {
            return base.Channel.GetAllTeamsAsync();
        }
        
        public bool AddBettor(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.AddBettor(bettor);
        }
        
        public System.Threading.Tasks.Task<bool> AddBettorAsync(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.AddBettorAsync(bettor);
        }
        
        public bool UpdateBettor(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.UpdateBettor(bettor);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBettorAsync(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.UpdateBettorAsync(bettor);
        }
        
        public bool DeleteBettor(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.DeleteBettor(bettor);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBettorAsync(LigaManagerServer.Models.Bettor bettor) {
            return base.Channel.DeleteBettorAsync(bettor);
        }
        
        public bool AddTeam(LigaManagerServer.Models.Team team) {
            return base.Channel.AddTeam(team);
        }
        
        public System.Threading.Tasks.Task<bool> AddTeamAsync(LigaManagerServer.Models.Team team) {
            return base.Channel.AddTeamAsync(team);
        }
        
        public bool UpdateTeam(LigaManagerServer.Models.Team team) {
            return base.Channel.UpdateTeam(team);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTeamAsync(LigaManagerServer.Models.Team team) {
            return base.Channel.UpdateTeamAsync(team);
        }
        
        public bool DeleteTeam(LigaManagerServer.Models.Team team) {
            return base.Channel.DeleteTeam(team);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTeamAsync(LigaManagerServer.Models.Team team) {
            return base.Channel.DeleteTeamAsync(team);
        }
        
        public bool DeleteSeason(LigaManagerServer.Models.Season season) {
            return base.Channel.DeleteSeason(season);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSeasonAsync(LigaManagerServer.Models.Season season) {
            return base.Channel.DeleteSeasonAsync(season);
        }
        
        public bool AddSeason(LigaManagerServer.Models.Season season) {
            return base.Channel.AddSeason(season);
        }
        
        public System.Threading.Tasks.Task<bool> AddSeasonAsync(LigaManagerServer.Models.Season season) {
            return base.Channel.AddSeasonAsync(season);
        }
        
        public bool UpdateSeason(LigaManagerServer.Models.Season season) {
            return base.Channel.UpdateSeason(season);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSeasonAsync(LigaManagerServer.Models.Season season) {
            return base.Channel.UpdateSeasonAsync(season);
        }
        
        public bool DeleteMatch(LigaManagerServer.Models.Match match) {
            return base.Channel.DeleteMatch(match);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMatchAsync(LigaManagerServer.Models.Match match) {
            return base.Channel.DeleteMatchAsync(match);
        }
        
        public bool AddMatch(LigaManagerServer.Models.Match match) {
            return base.Channel.AddMatch(match);
        }
        
        public System.Threading.Tasks.Task<bool> AddMatchAsync(LigaManagerServer.Models.Match match) {
            return base.Channel.AddMatchAsync(match);
        }
        
        public bool UpdateMatch(LigaManagerServer.Models.Match match) {
            return base.Channel.UpdateMatch(match);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMatchAsync(LigaManagerServer.Models.Match match) {
            return base.Channel.UpdateMatchAsync(match);
        }
        
        public bool AddSeasonToTeamRelation(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation) {
            return base.Channel.AddSeasonToTeamRelation(seasonToTeamRelation);
        }
        
        public System.Threading.Tasks.Task<bool> AddSeasonToTeamRelationAsync(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation) {
            return base.Channel.AddSeasonToTeamRelationAsync(seasonToTeamRelation);
        }
        
        public bool DeleteSeasonToTeamRelation(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation) {
            return base.Channel.DeleteSeasonToTeamRelation(seasonToTeamRelation);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSeasonToTeamRelationAsync(LigaManagerServer.Models.SeasonToTeamRelation seasonToTeamRelation) {
            return base.Channel.DeleteSeasonToTeamRelationAsync(seasonToTeamRelation);
        }
        
        public void GenerateMatches() {
            base.Channel.GenerateMatches();
        }
        
        public System.Threading.Tasks.Task GenerateMatchesAsync() {
            return base.Channel.GenerateMatchesAsync();
        }
    }
}
